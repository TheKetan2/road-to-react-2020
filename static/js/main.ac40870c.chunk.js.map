{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","App","props","_isMounted","state","results","searchKey","searchTerm","error","needsToSearchTopStories","bind","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","onDismiss","this","result","hits","page","oldHits","updatedHits","setState","axios","then","data","catch","event","target","value","preventDefault","id","filter","item","objectID","list","className","onChange","onSubmit","onClick","Component","Search","children","type","Table","map","key","style","width","href","url","title","author","num_comments","points","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ac40870c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst DEFAULT_QUERY = \"elon\";\nconst DEFAULT_HPP = \"100\";\n\nconst PATH_BASE = \"https://hn.algolia.com/api/v1\";\nconst PATH_SEARCH = \"/search\";\nconst PARAM_SEARCH = \"query=\";\nconst PARAM_PAGE = \"page=\";\nconst PARAM_HPP = \"hitsPerPage=\";\n\nclass App extends Component {\n  _isMounted = false;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      results: null,\n      searchKey: \"\",\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    const { searchKey, results } = this.state;\n\n    const oldHits =\n      results && results[searchKey] ? results[searchKey].hits : [];\n\n    const updatedHits = [...oldHits, ...hits];\n\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: { hits: updatedHits, page },\n      },\n    });\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    axios(\n      `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`\n    )\n      .then(\n        (result) => this._isMounted && this.setSearchTopStories(result.data)\n      )\n      .catch((error) => this._isMounted && this.setState({ error }));\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n\n    event.preventDefault();\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n\n    const isNotId = (item) => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: { hits: updatedHits, page },\n      },\n    });\n  }\n\n  render() {\n    const { searchTerm, results, searchKey, error } = this.state;\n\n    const page =\n      (results && results[searchKey] && results[searchKey].page) || 0;\n\n    const list =\n      (results && results[searchKey] && results[searchKey].hits) || [];\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        {error ? (\n          <div className=\"interactions\">\n            <p>Something went wrong.</p>\n          </div>\n        ) : (\n          <Table list={list} onDismiss={this.onDismiss} />\n        )}\n        <div className=\"interactions\">\n          <Button\n            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}\n          >\n            More\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Search = ({ value, onChange, onSubmit, children }) => (\n  <form onSubmit={onSubmit}>\n    <input type=\"text\" value={value} onChange={onChange} />\n    <button type=\"submit\">{children}</button>\n  </form>\n);\n\nconst Table = ({ list, onDismiss }) => (\n  <div className=\"table\">\n    {list.map((item) => (\n      <div key={item.objectID} className=\"table-row\">\n        <span style={{ width: \"40%\" }}>\n          <a href={item.url}>{item.title}</a>\n        </span>\n        <span style={{ width: \"30%\" }}>{item.author}</span>\n        <span style={{ width: \"10%\" }}>{item.num_comments}</span>\n        <span style={{ width: \"10%\" }}>{item.points}</span>\n        <span style={{ width: \"10%\" }}>\n          <Button\n            onClick={() => onDismiss(item.objectID)}\n            className=\"button-inline\"\n          >\n            Dismiss\n          </Button>\n        </span>\n      </div>\n    ))}\n  </div>\n);\n\nconst Button = ({ onClick, className = \"\", children }) => (\n  <button onClick={onClick} className={className} type=\"button\">\n    {children}\n  </button>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}